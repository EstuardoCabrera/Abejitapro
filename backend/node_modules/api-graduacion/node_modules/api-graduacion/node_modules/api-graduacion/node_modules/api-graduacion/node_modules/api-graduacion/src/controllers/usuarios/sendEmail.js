import nodemailer from 'nodemailer';
import { Router } from 'express';

const router = Router();

// Función para enviar correos
const sendEmail = async (emailValues) => {
  const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com', // Cambia esto por tu servidor SMTP
    port: 587, // Usualmente 587 para TLS
    secure: false, // true para 465, false para otros puertos
    auth: {
      user: 'usuario5deciclismo@gmail.com', // Tu dirección de correo
      pass: 'izilzdzgvonkvfcc', // Tu contraseña de correo
    },
  });

  const mailOptions = {
    from: emailValues.emailFrom, // Remitente
    to: emailValues.emailTo, // Destinatario
    subject: emailValues.subject, // Asunto
    text: `Hola ${emailValues.nombreUsuario},\n\nPara recuperar tu contraseña, utiliza el siguiente token: ${emailValues.jwt}`, // Texto plano del correo
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log('Mensaje enviado: %s', info.messageId);
  } catch (error) {
    console.error('Error al enviar el correo: ', error);
    throw error; // Lanza el error para que sea manejado en el controlador
  }
};

// Endpoint para enviar correos
router.post('/sendEmail', async (req, res) => {
  const { emailValues } = req.body; // Se espera un objeto emailValues

  // Validar que se hayan recibido los valores necesarios
  if (!emailValues || !emailValues.emailFrom || !emailValues.emailTo || !emailValues.subject || !emailValues.nombreUsuario || !emailValues.jwt) {
    return res.status(400).json({ error: 'Faltan datos para enviar el correo' });
  }

  try {
    await sendEmail(emailValues); // Llama a la función para enviar el correo
    res.status(200).json({ message: 'Correo enviado correctamente' });
  } catch (error) {
    res.status(500).json({ error: 'Error al enviar el correo' });
  }
});

export default router;
